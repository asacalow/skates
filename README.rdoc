= Babylon

== DESCRIPTION:

Babylon is a framework to build XMPP Applications in Ruby. The framework uses EventMachine to handle network connections.

This framework can use both an XMPP Component (XEP-0114) and an XMPP Client (and XMPP Servers should come soone). However, we strongly discourage any production application using a regular client.

== FEATURES/PROBLEMS:

Please report/request them at the Lighthouse : http://babylon.lighthouseapp.com/projects/27641-babylon/overview

== ROADMAP :

- Improve the Client Connection to support other authentication than PLAIN SASL
- Implement the ServerConnection for S2S
- Implement "auto-responding" features for disco-info... etc
- Use a better generator (the next version of Nokogiri should fix that)
- Review doc
- Write more spec
- Write tests
- Evangelize!

You can help with at least one of these points, don't turn your back on Babylon!

== DOCUMENTATION :

You can find it on our Rubyforge page : http://babylon.rubyforge.org/
Please note that the documentation is -and will always be- incomplete... so if you have any problems with something that is not clear enough to you, feel free to send us questions and do not hesitate to fork the project to add your own documentation. We will be more than happy to help you help us!

== SYNOPSIS :

You can build applications directly with Babylon, or you can use the Babylon::ClientConnection and Babylon::ComponentConnection to create simple apps, but you will then have to handle stanza routing and creation yourself. You can also use these classes in external gems.

=== To create an Application with Babylon: 

1. Install the gem
2. The app contains a generator that will "build" a scaffold for your application. 
    
    $> babylon myapp

3. Use the generator or write your own controllers : 

    $> script/generate messages echo:10:"//message[@type='chat']/body" subscribed:0:"//presence[@type='subscribe']"

This will generate a "MessagesController" class with 2 methods : echo and subscribed. "echo" will be called when the component receives message stanzas of type 'chat',  while "subscribed" will be called for presence stanzas of type 'subscribe'. 10 and 0 are the priority : useful when a stanza matches 2 XPath.  Also, try to put high priorities to the "most frequent" stanzas to improve your component's performance. This will also generate 2 'views' used to build your stanzas. And finally, this will write 2 routes in the config/routes.rb 

4. Write your application's code and views :

/app/controllers/message_controller.rb 

    class MessagesController < Babylon::Base::Controller

      def echo
        extract_to_and_from
        body = @stanza.xpath("//message/body").first
        @resp = body.text.reverse
      end

      def subscribed
        extract_to_and_from
        @ack = "Thanks for following me!"
      end

      protected

      def extract_to_and_from
        @from = @stanza.attributes["to"].text
        @to = @stanza.attributes["from"].text
      end

    end
    

5. Implement the corresponding views (used to generate the messages). Babylon uses the same file conventions as Rails : a subdirectory for each controller, and one file per action :
Compared to Rails, we are using accessors (and not @variables assigned in the controller). 

/app/views/messages/echo.xml.builder 

    self.message(:to => to, :from => from, :type => :chat) do
        self.body(resp)
    end

/app/views/messages/subscribed.xml.builder

    self.message(:to => to, :from => from, :type => :chat) do
      self.body(ack) # Same as self.send(:body, body) 
    end

6. Make sure that the XMPP settings are correct in config/config.yaml. !!! You need to have a Jabber Component, regular clients will NOT work!!!


7. And finally start the component :
    
    script/component

=== To use the Connection Classes only (Client or Component), you can just call the following :

Babylon::ClientConnection.connect(params, handler) 
or,
Babylon::ComponentConnection.connect(params, handler) 

where params is a hash for all the necessary information to connect, and handler is an object that will receive the callbacks. Right now 3 callbacks are supported:

on_connected(connection), on_disconnected and on_stanza(stanza)

== ADDITIONAL INFORMATION : 

Feel free to pull, branch, improve and commit the {code|specs|tests|docs} : we will merge it if it's a step ahead!

Babylon's edge versions are located at Github : http://github.com/julien51/babylon/tree/master

== REQUIREMENTS :

Gems : Eventmachine, nokogiri, YAML, log4r

== LICENSE:

(The MIT License)

Copyright (c) 2009 Julien Genestoux http://notifixio.us

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
'Software'), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
