= babylon

== DESCRIPTION:

Babylon is a framework to EventMachine based XMPP External Components in Ruby.

== FEATURES/PROBLEMS:

* This hasn't been tested. 

== ROADMAP :

- Better routing system, based on both xml elements and xml namespaces
- Adding "default" controllers to handle "common" functionnalities (Presence, DiscoInfo... etc)
- Adding "Reactor" Support to not block the component on long operations

== SYNOPSIS:

We're working on a generator... but if you want/need to try it out now:
1. Install the gem
2. Create a Directory "myapp" with the following:
    
    myapp/
        app/
            controllers/
            models/
            views/
        config/
            boot.rb
            config.yaml
            routes.yaml
        scripts/
            component

/config/config.yaml :

    development:
        jid: component.server.com
        password: password
        host: localhost
        port: 5278
        debug: true # or false ;)

/config/routes.yaml : 

    # This determines the routing for your controller
    # Everything is based on XPATH

    # XPath Match:
    #   controller: controller
    #   action: action
    #   priority: priority (useful if several routes have the same match)
        
/config/boot.rb

    # First, we must require "rubygems"
    require "rubygems"
    require "babylon"

    # And now load the controllers
    Dir.glob(File.join(File.dirname(__FILE__), '../app/controllers/*_controller.rb')).each {|f| require f }

    # And now start the App
    Babylon::Runner::run()

/scriprs/component (must be executable)

    #!/usr/bin/env ruby
    require File.dirname(__FILE__) + '/../config/boot'
    
    

2. Write your own "controllers"

/app/controllers/message_controller.rb 

    class MessageController < Babylon::Base::Controller  
      # Each controller is initiated with the stanza.(similar to params in rails actions)

      def echo
        # We do stuff here
        @to = @stanza.attributes["to"]
        @from = @stanza.attributes["from"]
        @body = @stanza.elements["//body"].text
        # By default, this would "render" the echo.xml.builder
      end
    end

3. Add the corresponding views (used to generate the messages). Babylon uses the same file conventions as Rails : a subdirectory for each controller, and one file per action :

/app/views/message/echo.xml.builder 

    xml.message(:to => @from, :from => @to, :type => :chat) do |message|
      message.body(@body)
    end

6. And finally start the component :
    
    script/component

== ADDITIONAL INFORMATION

This code hasn't been tested at all! It's just a proof of concept. Feel free to pull, branch, improve {code|specs|tests|docs} and we will merge it!

== REQUIREMENTS:

Gems : Eventmachine, nokogiri, libxml-ruby, builder

== INSTALL:

- sudo gem install babylon

== LICENSE:

(The MIT License)

Copyright (c) 2009 Julien Genestoux http://notifixio.us

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
'Software'), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.